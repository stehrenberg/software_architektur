/**
 * Hochschule Muenchen, Fakultaet 07 fuer Mathematik und Informatik Praktikum
 * Software-Architektur, Sommersemester 2015 OS: Windows 7 Professional SP1 (64
 * Bit); Java-Version: 1.8.0_05 CPU: Intel Core2Duo T7300 @ 2.0 GHz, 4GB RAM
 * Aufgabe 3: Decorator-Pattern
 */

package edu.hm.iny.patterns.decorators;

import java.util.NoSuchElementException;

import edu.hm.cs.rs.arch.pattern.decorator.TextImage;

/**
 * Diese Klasse implementiert das Interface TextImage.
 * Der Konstruktor akzeptiert eine Anzahl Strings, von denen jeder eine Bildzeile repräsentiert.
 * Beispielsweise erzeugt der Aufruf new StringPicture("Zugspitze", "über", "Nebel")
 * ein Textbild mit einer Breite von 9 Spalten und einer Höhe von 3 Zeilen.
 * Das Bild zeigt die Zugspitze über Nebel.
 * Beachten Sie, dass alle Zeilen so lang sind wie das Bild breit ist. Kurze Strings ergänzt die Klasse mit Leerzeichen.
 * @author Stäff
 *
 */
public class StringPicture implements TextImage {

	/** */
	private final int imageWidth;
	/** */
	private final int imageHeight;
	/** */
	private final String[] imageStrings;

	/**
	 * Ctor.
	 * @param strings
	 */
	public StringPicture(final String... strings ) {

		imageWidth = getLengthOfLongestString(strings);
		imageHeight = strings.length;
		imageStrings = new String[imageHeight];

		for(int i = 0; i < strings.length; i++)
			imageStrings[i] = strings[i];
	}

	@Override
	public int getWidth() {
		return imageWidth;
	}

	@Override
	public int getHeight() {
		return imageHeight;
	}

	@Override
	public char charAt(final int column, final int row) {

		checkIfCoordinatesWithinPicture(column, row);
		char imageChar = ' ';
		// TODO Condition wenigstens in catchy boolean auslagern!?
		if (column < imageStrings[row].length())
			imageChar = imageStrings[row].charAt(column);

		return imageChar;
	}

	/**
	 * Checks if the stated coordinates lie within the picture. Throws an Exception
	 * if the coordinates are not valid.
	 * @param column The image's column.
	 * @param row The image's row.
	 * @return True, if coordinates are valid.
	 * @throws NoSuchElementException If coordinates are outside the picture range.
	 */
	private boolean checkIfCoordinatesWithinPicture(final int column, final int row) {
		final boolean withinStrings = column < imageWidth && row < imageHeight;
		if(!withinStrings)
			throw new NoSuchElementException(
					"Invalid coordinates. No element at "
							+ row
							+ "/"
							+ column
							+ " (row/column)");

		return withinStrings;
	}

	/**
	 * Returns the longest string from the vararg-parameter.
	 * Needed to determine the total image width.
	 * @param strings The vararg containing the strings for the text image.
	 * @return The longest string within the vararg.
	 */
	private int getLengthOfLongestString(final String[] strings) {

		String longestString = "";
		for(final String string : strings)
			if(string.length() > longestString.length())
				longestString = string;

		return longestString.length();
	}
}
